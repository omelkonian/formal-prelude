module Prelude.Show where

open import Data.String using (_<+>_; parensIfSpace)

open import Prelude.Init
open import Prelude.General
open import Prelude.Lists
open import Prelude.Semigroup
open import Prelude.Monoid
open import Prelude.ToN

open Meta hiding (module Show)

record Show (A : Set ‚Ñì) : Set ‚Ñì where
  field show : A ‚Üí String
open Show ‚¶É...‚¶Ñ public

private
  -- add appropriate parens depending on the given visibility
  visibilityParen : Visibility ‚Üí String ‚Üí String
  visibilityParen visible   s = parensIfSpace s
  visibilityParen hidden    s = braces s
  visibilityParen instance‚Ä≤ s = braces (braces s)

private variable A : Set ‚Ñì; B : Set ‚Ñì‚Ä≤

instance
  Show-‚ä§ : Show ‚ä§
  Show-‚ä§ .show tt = "tt"

  Show-Char : Show Char
  Show-Char .show = Ch.show

  Show-String : Show String
  Show-String .show x = x

  Show-Bool : Show Bool
  Show-Bool .show = B.show

  Show-‚Ñï : Show ‚Ñï
  Show-‚Ñï .show = Nat.show

  Show-Fin : ‚àÄ {n} ‚Üí Show (Fin n)
  Show-Fin .show = ("# " ‚óá_) ‚àò show ‚àò to‚Ñï

  Show-Float : Show Float
  Show-Float .show = Float.show

  Show-√ó : ‚¶É Show A ‚¶Ñ ‚Üí ‚¶É Show B ‚¶Ñ ‚Üí Show (A √ó B)
  Show-√ó .show (x , y) = parens $ show x <> " , " <> show y

  Show-List : ‚¶É Show A ‚¶Ñ ‚Üí Show (List A)
  Show-List .show = braces ‚àò Str.intersperse ", " ‚àò map show

  Show-Maybe : ‚¶É Show A ‚¶Ñ ‚Üí Show (Maybe A)
  Show-Maybe .show = Œª where
    nothing ‚Üí "nothing"
    (just x) ‚Üí "just " ‚óá show x

  Show-Name : Show Name
  Show-Name .show = removeQualifiers ‚àò showName

  Show-Meta : Show Meta
  Show-Meta .show = showMeta

  ShowLiteral : Show Literal
  ShowLiteral . show = Œª where
    (nat x)    ‚Üí show x
    (word64 x) ‚Üí show (to‚Ñï x)
    (float x)  ‚Üí show x
    (char x)   ‚Üí show x
    (string x) ‚Üí show x
    (name x)   ‚Üí show x
    (meta x)   ‚Üí show x

  Show-Vis : Show Visibility
  Show-Vis .show = Œª where visible ‚Üí "ùïß"; hidden ‚Üí "ùïô"; instance‚Ä≤ ‚Üí "ùïö"

  Show-Arg : ‚¶É Show A ‚¶Ñ ‚Üí Show (Arg A)
  Show-Arg .show (arg (arg-info v _) x) = show v ‚óá show x
  -- Show-Arg .show = show ‚àò unArg

  Show-Abs : ‚¶É Show A ‚¶Ñ ‚Üí Show (Abs A)
  Show-Abs .show (abs s x) = "abs " ‚óá show s ‚óá " " ‚óá show x

  mutual
    {-# TERMINATING #-}
    Show-Term : Show Term
    Show-Term .show = Œª where
      (var x args)         ‚Üí "var" <+> show x <+> show args
      (con c args)         ‚Üí show c <+> show args
      (def f args)         ‚Üí show f <+> show args
      (lam v (abs s x))    ‚Üí "Œª" <+> visibilityParen v s <+> "‚Üí" <+> show x
      (pat-lam cs args)    ‚Üí "Œª {" <+> show cs <+> "}" <+> show args
      (Œ†[ x ‚à∂ arg i a ] b) ‚Üí "Œ† (" ‚óá visibilityParen (Meta.Argument.visibility i) x <+> ":"
                         <+> parensIfSpace (show a) ‚óá ")" <+> parensIfSpace (show b)
      (sort s)             ‚Üí show s
      (lit l)              ‚Üí show l
      (meta x args)        ‚Üí show x <+> show args
      unknown              ‚Üí "unknown"

    Show-Clause : Show Clause
    Show-Clause .show = Œª where
      (clause _ ps t)      ‚Üí show ps <+> "‚Üí" <+> show t
      (absurd-clause _ ps) ‚Üí show ps

    Show-Sort : Show Sort
    Show-Sort .show = Œª where
      (set t)     ‚Üí "Set" <+> parensIfSpace (show t)
      (lit n)     ‚Üí "Set" ‚óá show n -- no space to disambiguate from set t
      (prop t)    ‚Üí "Prop" <+> parensIfSpace (show t)
      (propLit n) ‚Üí "Prop" ‚óá show n -- no space to disambiguate from prop t
      (inf n)     ‚Üí "Setœâ" ‚óá show n
      unknown     ‚Üí "unknown"

    ShowPattern : Show Pattern
    ShowPattern .show = Œª where
      (Pattern.con c []) ‚Üí show c
      (Pattern.con c ps) ‚Üí parens (show c <+> show ps)
      (Pattern.dot t)    ‚Üí "." ‚óá parens (show t)
      (Pattern.var x)    ‚Üí "pat-var" <+> show x
      (Pattern.lit l)    ‚Üí show l
      (Pattern.proj f)   ‚Üí show f
      (Pattern.absurd _) ‚Üí "()"

  open import Reflection.Definition
  Show-Definition : Show Definition
  Show-Definition .show = Œª where
    (function cs)       ‚Üí "function" <+> braces (show cs)
    (data-type pars cs) ‚Üí "datatype" <+> show pars <+> braces (intersperse ", " (map show cs))
    (record‚Ä≤ c fs)      ‚Üí "record" <+> show c <+> braces (intersperse ", " (map (show ‚àò‚Ä≤ unArg) fs))
    (constructor‚Ä≤ d)    ‚Üí "constructor" <+> show d
    axiom               ‚Üí "axiom"
    primitive‚Ä≤          ‚Üí "primitive"
